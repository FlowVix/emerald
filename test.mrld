


enum Op {
    Plus,
    Minus,
    Mult,
    Div,
}

enum ASTNode {
    Number (number),
    Operation {left: ASTNode, op: Op, right: ASTNode},
    Unary {op: Op, value: ASTNode},
}

impl ASTNode {
    execute: (self) => {
        match self {
            case ASTNode:Number (n) -> n,
            case ASTNode:Operation {
                left, op, right
            } -> {
                match op {
                    case Op:Plus -> left.execute() + right.execute(),
                    case Op:Minus -> left.execute() - right.execute(),
                    case Op:Mult -> left.execute() * right.execute(),
                    case Op:Div -> left.execute() / right.execute(),
                }
            },
            case ASTNode:Unary {op, value} -> {
                match op {
                    case Op:Plus -> + value.execute(),
                    case Op:Minus -> - value.execute(),
                }
            }
        }
    }
}

let calc = ASTNode:Operation {
    left: ASTNode:Unary {op: Op:Minus, value: ASTNode:Number(2) },
    op: Op:Mult,
    right: ASTNode:Operation {
        left: ASTNode:Number(18),
        op: Op:Div,
        right: ASTNode:Number(3),
    },
}

print(calc.execute());

