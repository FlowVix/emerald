


export enum HashMapApply {
    Values,
    Keys,
    Pairs,
}

export struct HashMap {
    list: array,
    elements: number,
}

let DEFAULT_SIZE = 2;

impl HashMap {
    new: (
        from: dict = {},
        slots: number = DEFAULT_SIZE,
    ) => {
        let new_map = HashMap::{
            list: [[]] * slots,
            elements: 0,
        };
        for (k, v) of from.items() {
            new_map.insert(k, v);
        }
        return new_map;
    },

    _grow: (self) => {
        let new_map = HashMap::new({}, self.list.length * 2);
        for i of self.list {
            for pair of i {
                new_map.insert(pair[0], pair[1]);
            }
        }
        self = new_map;
    },

    // display

    insert: (
        self,
        key,
        value,
    ) => {
        let index = hash(key) % self.list.length;
        for (i, el) of self.list[index].enumerate() {
            if el[0] == key {
                self.list[index][i][1] = value;
                return;
            }
        }
        self.list[index].push( (key, value) );
        self.elements += 1;
        if self.elements >= self.list.length
            self._grow();
    },

    get: (
        self,
        key,
    ) => {
        let index = hash(key) % self.list.length;
        for el of self.list[index] {
            if el[0] == key
                return el[1];
        }
        return null;
    },

    _index_: (self, args) => {
        if args.length != 1 {
            throw "Indexing into hashmap takes one argument";
        }
        return self.get(args[0]);
    },

    get_pair: (
        self,
        key,
        dict_form: bool = false
    ) => {
        let index = hash(key) % self.list.length;
        for el of self.list[index] {
            if el[0] == key {
                if dict_form {
                    return {key, value: el[1]};
                } else {
                    return (key, el[1]);
                }
            }
        }
        return null;
    },

    get_key: (
        self,
        value
    ) => {
        for i of self.list {
            for el of i {
                if el[1] == value {
                    return el[0];
                }
            }
        }
        return null;
    },

    get_keys: (
        self,
        value,
    ) => {
        let ret = [];
        for i of self.list {
            for el of i {
                if el[1] == value {
                    ret.push(el[0]);
                }
            }
        }
        return ret;
    },

    keys: (self) => {
        let ret = [];
        for i of self.list {
            for j of i {
                ret.push(j[0]);
            }
        }
        return ret;
    },

    values: (self) => {
        let ret = [];
        for i of self.list {
            for j of i {
                ret.push(j[1]);
            }
        }
        return ret;
    },

    pairs: (
        self,
        dict_form: bool = false,
    ) => {
        let ret = [];
        for i of self.list {
            for j of i {
                if dict_form {
                    ret.push({key: j[0], value: j[1]});
                } else {
                    ret.push((j[0], j[1]));
                }
            }
        }
        return ret;
    },

    inverted: (self) => {
        let new_map = HashMap::new();
        for i of self.list {
            for j of i {
                new_map.insert(j[1], j[0]);
            }
        }
        return new_map;
    },

    clear: (self) => {
        self = HashMap::new({}, self.list.length);
    },

    has_key: (
        self,
        key,
    ) => {
        return self.get(key) != null;
    },

    has_value: (
        self,
        value,
    ) => {
        return self.get_key(value) != null;
    },

    get_or_insert: (
        self,
        key,
        or,
    ) => {
        let get = self.get(key);
        if get != null {
            return get;
        }
        self.insert(key, or);
        return or;
    },

    is_empty: (self) => {
        return self.elements == 0;
    },

    remove: (
        self,
        key,
    ) => {
        let index = hash(key) % self.list.length;
        let value = null;
        self.list[index] = self.list[index].filter(el => {
            if el[0] == key {
                value = el[1];
                self.elements -= 1;
                return false;
            }
            return true;
        });
        return value;
    },

    map: (
        self,
        cb: function | tuple[function, function],
        apply_type: HashMapApply = HashMapApply:Values,
        in_place: bool = false,
    ) => {
        let new_map = HashMap::new();
        for (k, v) of self.pairs() {
            match apply_type {
                case HashMapApply:Values -> new_map.insert(k, cb(v)),
                case HashMapApply:Keys -> new_map.insert(cb(k), v),
                case HashMapApply:Pairs -> new_map.insert(cb[0](k), cb[1](v)),
            }
        }
        if !in_place {
            return new_map;
        }
        self = new_map;
    },

    filter: (
        self,
        cb: function | tuple[function, function],
        apply_type: HashMapApply = HashMapApply:Values,
        in_place: bool = false,
    ) => {
        let new_map = HashMap::new();
        for (k, v) of self.pairs() {
            if match apply_type {
                case HashMapApply:Values -> cb(v),
                case HashMapApply:Keys -> cb(k),
                case HashMapApply:Pairs -> cb[0](k) && cb[1](v),
            } {
                new_map.insert(k, v);
            }
        }
        if !in_place {
            return new_map;
        }
        self = new_map;
    },

    any: (
        self,
        cb: function | tuple[function, function],
        apply_type: HashMapApply = HashMapApply:Values,
    ) => {
        let new_map = HashMap::new();
        for (k, v) of self.pairs() {
            if match apply_type {
                case HashMapApply:Values -> cb(v),
                case HashMapApply:Keys -> cb(k),
                case HashMapApply:Pairs -> cb[0](k) && cb[1](v),
            } {
                return true;
            }
        }
        return false;
    },

    all: (
        self,
        cb: function | tuple[function, function],
        apply_type: HashMapApply = HashMapApply:Values,
    ) => {
        let new_map = HashMap::new();
        for (k, v) of self.pairs() {
            if !match apply_type {
                case HashMapApply:Values -> cb(v),
                case HashMapApply:Keys -> cb(k),
                case HashMapApply:Pairs -> cb[0](k) && cb[1](v),
            } {
                return false;
            }
        }
        return true;
    },

}






